#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1 4
    // smart_contracts/task/contract.py:5
    // class Task(ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@8
    pushbytess 0x578263b7 0xb6c2b148 0x12563767 // method "createAsset()uint64", method "asset_opt_in(asset)void", method "assetTransfer(asset,account,uint64)void"
    txna ApplicationArgs 0
    match main_createAsset_route@3 main_asset_opt_in_route@4 main_assetTransfer_route@5

main_after_if_else@12:
    // smart_contracts/task/contract.py:5
    // class Task(ARC4Contract):
    intc_0 // 0
    return

main_assetTransfer_route@5:
    // smart_contracts/task/contract.py:27
    // @abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/task/contract.py:5
    // class Task(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Assets
    txna ApplicationArgs 2
    btoi
    txnas Accounts
    txna ApplicationArgs 3
    btoi
    // smart_contracts/task/contract.py:27
    // @abimethod
    callsub assetTransfer
    intc_1 // 1
    return

main_asset_opt_in_route@4:
    // smart_contracts/task/contract.py:18
    // @abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/task/contract.py:5
    // class Task(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Assets
    // smart_contracts/task/contract.py:18
    // @abimethod
    callsub asset_opt_in
    intc_1 // 1
    return

main_createAsset_route@3:
    // smart_contracts/task/contract.py:7
    // @abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub createAsset
    itob
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_bare_routing@8:
    // smart_contracts/task/contract.py:5
    // class Task(ARC4Contract):
    txn OnCompletion
    bnz main_after_if_else@12
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return


// smart_contracts.task.contract.Task.createAsset() -> uint64:
createAsset:
    // smart_contracts/task/contract.py:9-14
    // itxn_result = itxn.AssetConfig(
    //     total=100_00,
    //     decimals=5,
    //     unit_name="TestUnit",
    //     asset_name="TaskAsset",
    // ).submit()
    itxn_begin
    // smart_contracts/task/contract.py:13
    // asset_name="TaskAsset",
    pushbytes "TaskAsset"
    itxn_field ConfigAssetName
    // smart_contracts/task/contract.py:12
    // unit_name="TestUnit",
    pushbytes "TestUnit"
    itxn_field ConfigAssetUnitName
    // smart_contracts/task/contract.py:11
    // decimals=5,
    pushint 5 // 5
    itxn_field ConfigAssetDecimals
    // smart_contracts/task/contract.py:10
    // total=100_00,
    pushint 10000 // 10000
    itxn_field ConfigAssetTotal
    // smart_contracts/task/contract.py:9
    // itxn_result = itxn.AssetConfig(
    pushint 3 // acfg
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/task/contract.py:9-14
    // itxn_result = itxn.AssetConfig(
    //     total=100_00,
    //     decimals=5,
    //     unit_name="TestUnit",
    //     asset_name="TaskAsset",
    // ).submit()
    itxn_submit
    itxn CreatedAssetID
    // smart_contracts/task/contract.py:16
    // return itxn_result.created_asset.id
    retsub


// smart_contracts.task.contract.Task.asset_opt_in(asset: uint64) -> void:
asset_opt_in:
    // smart_contracts/task/contract.py:18-19
    // @abimethod
    // def asset_opt_in(self, asset: Asset) -> None:
    proto 1 0
    // smart_contracts/task/contract.py:20-25
    // itxn.AssetTransfer(
    //     asset_receiver=Global.current_application_address,
    //     xfer_asset=asset,
    //     asset_amount=0,
    //     fee=0,
    // ).submit()
    itxn_begin
    // smart_contracts/task/contract.py:21
    // asset_receiver=Global.current_application_address,
    global CurrentApplicationAddress
    // smart_contracts/task/contract.py:23
    // asset_amount=0,
    intc_0 // 0
    itxn_field AssetAmount
    frame_dig -1
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/task/contract.py:20
    // itxn.AssetTransfer(
    intc_2 // axfer
    itxn_field TypeEnum
    // smart_contracts/task/contract.py:24
    // fee=0,
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/task/contract.py:20-25
    // itxn.AssetTransfer(
    //     asset_receiver=Global.current_application_address,
    //     xfer_asset=asset,
    //     asset_amount=0,
    //     fee=0,
    // ).submit()
    itxn_submit
    retsub


// smart_contracts.task.contract.Task.assetTransfer(asset: uint64, receiver: bytes, amount: uint64) -> void:
assetTransfer:
    // smart_contracts/task/contract.py:27-28
    // @abimethod
    // def assetTransfer(self, asset: Asset, receiver: Account, amount: UInt64) -> None:
    proto 3 0
    // smart_contracts/task/contract.py:29-34
    // itxn.AssetTransfer(
    //     asset_receiver=receiver,
    //     xfer_asset=asset,
    //     asset_amount=amount,
    //     fee=0,
    // ).submit()
    itxn_begin
    frame_dig -1
    itxn_field AssetAmount
    frame_dig -3
    itxn_field XferAsset
    frame_dig -2
    itxn_field AssetReceiver
    // smart_contracts/task/contract.py:29
    // itxn.AssetTransfer(
    intc_2 // axfer
    itxn_field TypeEnum
    // smart_contracts/task/contract.py:33
    // fee=0,
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/task/contract.py:29-34
    // itxn.AssetTransfer(
    //     asset_receiver=receiver,
    //     xfer_asset=asset,
    //     asset_amount=amount,
    //     fee=0,
    // ).submit()
    itxn_submit
    retsub
