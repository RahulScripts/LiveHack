{
    "name": "CarbonCreditContract",
    "structs": {},
    "methods": [
        {
            "name": "initialize",
            "args": [
                {
                    "type": "account",
                    "name": "manager"
                },
                {
                    "type": "account",
                    "name": "reserve"
                },
                {
                    "type": "account",
                    "name": "freeze"
                },
                {
                    "type": "account",
                    "name": "clawback"
                },
                {
                    "type": "uint64",
                    "name": "total_supply"
                },
                {
                    "type": "string",
                    "name": "asset_name"
                },
                {
                    "type": "string",
                    "name": "unit_name"
                },
                {
                    "type": "uint64",
                    "name": "decimals"
                },
                {
                    "type": "string",
                    "name": "url"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_whitelist",
            "args": [
                {
                    "type": "account",
                    "name": "address"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "opt_in_user",
            "args": [
                {
                    "type": "asset",
                    "name": "asset"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "is_user_opted_in",
            "args": [
                {
                    "type": "account",
                    "name": "user"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "mint_token",
            "args": [
                {
                    "type": "uint64",
                    "name": "amount"
                },
                {
                    "type": "account",
                    "name": "receiver"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "transfer_token",
            "args": [
                {
                    "type": "uint64",
                    "name": "amount"
                },
                {
                    "type": "account",
                    "name": "receiver"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "redeem_token",
            "args": [
                {
                    "type": "uint64",
                    "name": "amount"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "recover_token",
            "args": [
                {
                    "type": "string",
                    "name": "user_id"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_balance",
            "args": [
                {
                    "type": "account",
                    "name": "account"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_total_supply",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "freeze_account",
            "args": [
                {
                    "type": "account",
                    "name": "target"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "clawback_tokens",
            "args": [
                {
                    "type": "account",
                    "name": "target"
                },
                {
                    "type": "uint64",
                    "name": "amount"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_user_redemptions",
            "args": [
                {
                    "type": "account",
                    "name": "user"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_user_mint_count",
            "args": [
                {
                    "type": "account",
                    "name": "user"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 4,
                "bytes": 5
            },
            "local": {
                "ints": 5,
                "bytes": 1
            }
        },
        "keys": {
            "global": {
                "carbon_credit_interval": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Y2FyYm9uX2NyZWRpdF9pbnRlcnZhbA=="
                },
                "token_asset_id": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG9rZW5fYXNzZXRfaWQ="
                },
                "total_supply": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxfc3VwcGx5"
                },
                "manager": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "bWFuYWdlcg=="
                },
                "reserve": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "cmVzZXJ2ZQ=="
                },
                "freeze": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "ZnJlZXpl"
                },
                "clawback": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "Y2xhd2JhY2s="
                },
                "whitelist": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "d2hpdGVsaXN0"
                },
                "last_mint_time": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bGFzdF9taW50X3RpbWU="
                }
            },
            "local": {
                "user_balance": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YmFsYW5jZQ=="
                },
                "user_last_mint": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bGFzdF9taW50"
                },
                "user_mint_count": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bWludF9jb3VudA=="
                },
                "user_redemption_count": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cmVkZWVtZWQ="
                },
                "user_token_history": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "aGlzdG9yeQ=="
                },
                "opted_in": {
                    "keyType": "AVMString",
                    "valueType": "bool",
                    "key": "b3B0ZWRfaW4="
                }
            },
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        916
                    ],
                    "errorMessage": "Address not whitelisted"
                },
                {
                    "pc": [
                        634
                    ],
                    "errorMessage": "Already initialized"
                },
                {
                    "pc": [
                        820
                    ],
                    "errorMessage": "Amount must be positive"
                },
                {
                    "pc": [
                        1065
                    ],
                    "errorMessage": "Cooldown active"
                },
                {
                    "pc": [
                        931,
                        982
                    ],
                    "errorMessage": "Insufficient balance"
                },
                {
                    "pc": [
                        843
                    ],
                    "errorMessage": "Mint cooldown active"
                },
                {
                    "pc": [
                        279,
                        302,
                        325,
                        347,
                        365,
                        382,
                        405,
                        423,
                        439,
                        461,
                        483,
                        505,
                        523,
                        541
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        1136
                    ],
                    "errorMessage": "Only clawback"
                },
                {
                    "pc": [
                        624
                    ],
                    "errorMessage": "Only creator can initialize"
                },
                {
                    "pc": [
                        1121
                    ],
                    "errorMessage": "Only freeze account"
                },
                {
                    "pc": [
                        817
                    ],
                    "errorMessage": "Only manager can mint"
                },
                {
                    "pc": [
                        696
                    ],
                    "errorMessage": "Only manager can set whitelist"
                },
                {
                    "pc": [
                        806
                    ],
                    "errorMessage": "Receiver not opted in"
                },
                {
                    "pc": [
                        1050
                    ],
                    "errorMessage": "Recovery limit reached"
                },
                {
                    "pc": [
                        613
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        282,
                        305,
                        328,
                        350,
                        368,
                        385,
                        408,
                        426,
                        442,
                        464,
                        486,
                        508,
                        526,
                        544
                    ],
                    "errorMessage": "can only call when not creating"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiADAAGAowUmDwdiYWxhbmNlBBUffHUMdG90YWxfc3VwcGx5Cm1pbnRfY291bnQIcmVkZWVtZWQOdG9rZW5fYXNzZXRfaWQHbWFuYWdlchZjYXJib25fY3JlZGl0X2ludGVydmFsAQAJbGFzdF9taW50BmZyZWV6ZQhjbGF3YmFjawl3aGl0ZWxpc3QIb3B0ZWRfaW4ObGFzdF9taW50X3RpbWUxG0EBtIIOBJ2xcQUEo9gPQgSlmaZuBN8fp1oE4aqRgwQDgOVlBPid1n0Elgtg5ATKiBl2BEaQk1UEqLV30gRKVnL3BKt21aQEbSc9ZzYaAI4OAQgA9gDkAM4AuACiAJIAgABpAFgARgAwABkAAiJDMRkURDEYRDYaARfAHIgDXBYpTFCwI0MxGRREMRhENhoBF8AciAM3FilMULAjQzEZFEQxGEQ2GgEXwBw2GgIXiAMNI0MxGRREMRhENhoBF8AciALsI0MxGRREMRhEiALYFilMULAjQzEZFEQxGEQ2GgEXwByIArQWKUxQsCNDMRkURDEYRDYaAVcCAIgCXCNDMRkURDEYRDYaAReIAhMjQzEZFEQxGEQ2GgEXNhoCF8AciAGoI0MxGRREMRhENhoBFzYaAhfAHIgBQCNDMRkURDEYRDYaARfAHIgBHylMULAjQzEZFEQxGEQ2GgEXwDCIALkjQzEZFEQxGEQ2GgEXwByIAJMjQzEZFEQxGEQ2GgEXwBw2GgIXwBw2GgMXwBw2GgQXwBw2GgUXNhoGVwIANhoHVwIANhoIFzYaCVcCAIgAEhYpTFCwI0MxGUD+sDEYFEQjQ4oJATEAMgkSRCInBWUiTgJNFEQnBSNnKov7ZycGi/dngAdyZXNlcnZli/hnJwqL+WcnC4v6ZycHJGciJwVlIk4CTYmKAQAxADIDIicGZU0SRCcMi/9niYoBADEASSInDWMnCE4CTScIEkEAJosASSgiZkknCSJmSSsiZkknBCJmSYAHaGlzdG9yeSJmJw2AAYBmsSKyEov/shGLALIUgQSyECKyAbOJigEBi/8yCGEnCCJPAlSJigIAi/8yCGFEMQAyAyInBmVNEkSL/kQyByInDmUiTgJNIicHZSROAk0ISwEORCIqZSJOAk2L/ggqTGcnDkxni/8iKGMiTgJNi/4Ii/8oTwJmiYoCADEAMgMiJwxlTUkyAxNBABKLAIsBEkAACIv/iwESQQAuI0SLAEkiKGMiTgJNSYv+D0SL/yIoYyJOAk1Mi/4JTwIoTwJmi/4Ii/8oTwJmiSJC/8+KAQAxAEkiKGMiTgJNSYv/D0SL/wlLAShPAmZJIicEYyJOAk2L/wgnBExmIiplIk4CTYv/CSpMZ4mKAQAxAEkiK2MiTgJNSwEiJwljIk4CTUsBgQIMRCInB2UkTgJNMgdOAggPRIFkSwKI/u0jCEsBK08CZicJMgdmiYoBAYv/IihjIk4CTYkiKmUiTgJNiYoBADEAMgMiJwplTRJEiYoCADEAMgMiJwtlTRJEiYoBAYv/IicEYyJOAk2JigEBi/8iK2MiTgJNiQ==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 9,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}