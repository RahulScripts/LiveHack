# flake8: noqa
# fmt: off
# mypy: ignore-errors
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^3.0.0

# common
import dataclasses
import typing
# core algosdk
import algosdk
from algosdk.transaction import OnComplete
from algosdk.atomic_transaction_composer import TransactionSigner
from algosdk.source_map import SourceMap
from algosdk.transaction import Transaction
from algosdk.v2client.models import SimulateTraceConfig
# utils
import algokit_utils
from algokit_utils import AlgorandClient as _AlgoKitAlgorandClient

_APP_SPEC_JSON = r"""{"arcs": [22, 28], "bareActions": {"call": [], "create": ["NoOp"]}, "methods": [{"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "account", "name": "manager"}, {"type": "account", "name": "reserve"}, {"type": "account", "name": "freeze"}, {"type": "account", "name": "clawback"}, {"type": "uint64", "name": "total_supply"}, {"type": "string", "name": "asset_name"}, {"type": "string", "name": "unit_name"}, {"type": "uint64", "name": "decimals"}, {"type": "string", "name": "url"}], "name": "initialize", "returns": {"type": "uint64"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "account", "name": "address"}], "name": "set_whitelist", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "asset", "name": "asset"}], "name": "opt_in_user", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "account", "name": "user"}], "name": "is_user_opted_in", "returns": {"type": "bool"}, "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "amount"}, {"type": "account", "name": "receiver"}], "name": "mint_token", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "amount"}, {"type": "account", "name": "receiver"}], "name": "transfer_token", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "amount"}], "name": "redeem_token", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "string", "name": "user_id"}], "name": "recover_token", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "account", "name": "account"}], "name": "get_balance", "returns": {"type": "uint64"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "get_total_supply", "returns": {"type": "uint64"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "account", "name": "target"}], "name": "freeze_account", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "account", "name": "target"}, {"type": "uint64", "name": "amount"}], "name": "clawback_tokens", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "account", "name": "user"}], "name": "get_user_redemptions", "returns": {"type": "uint64"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "account", "name": "user"}], "name": "get_user_mint_count", "returns": {"type": "uint64"}, "events": [], "readonly": false, "recommendations": {}}], "name": "CarbonCreditContract", "state": {"keys": {"box": {}, "global": {"carbon_credit_interval": {"key": "Y2FyYm9uX2NyZWRpdF9pbnRlcnZhbA==", "keyType": "AVMString", "valueType": "AVMUint64"}, "token_asset_id": {"key": "dG9rZW5fYXNzZXRfaWQ=", "keyType": "AVMString", "valueType": "AVMUint64"}, "total_supply": {"key": "dG90YWxfc3VwcGx5", "keyType": "AVMString", "valueType": "AVMUint64"}, "manager": {"key": "bWFuYWdlcg==", "keyType": "AVMString", "valueType": "address"}, "reserve": {"key": "cmVzZXJ2ZQ==", "keyType": "AVMString", "valueType": "address"}, "freeze": {"key": "ZnJlZXpl", "keyType": "AVMString", "valueType": "address"}, "clawback": {"key": "Y2xhd2JhY2s=", "keyType": "AVMString", "valueType": "address"}, "whitelist": {"key": "d2hpdGVsaXN0", "keyType": "AVMString", "valueType": "address"}, "last_mint_time": {"key": "bGFzdF9taW50X3RpbWU=", "keyType": "AVMString", "valueType": "AVMUint64"}}, "local": {"user_balance": {"key": "YmFsYW5jZQ==", "keyType": "AVMString", "valueType": "AVMUint64"}, "user_last_mint": {"key": "bGFzdF9taW50", "keyType": "AVMString", "valueType": "AVMUint64"}, "user_mint_count": {"key": "bWludF9jb3VudA==", "keyType": "AVMString", "valueType": "AVMUint64"}, "user_redemption_count": {"key": "cmVkZWVtZWQ=", "keyType": "AVMString", "valueType": "AVMUint64"}, "user_token_history": {"key": "aGlzdG9yeQ==", "keyType": "AVMString", "valueType": "AVMUint64"}, "opted_in": {"key": "b3B0ZWRfaW4=", "keyType": "AVMString", "valueType": "bool"}}}, "maps": {"box": {}, "global": {}, "local": {}}, "schema": {"global": {"bytes": 5, "ints": 4}, "local": {"bytes": 1, "ints": 5}}}, "structs": {}, "byteCode": {"approval": "CiADAAGAowUmDwdiYWxhbmNlBBUffHUMdG90YWxfc3VwcGx5Cm1pbnRfY291bnQIcmVkZWVtZWQOdG9rZW5fYXNzZXRfaWQHbWFuYWdlchZjYXJib25fY3JlZGl0X2ludGVydmFsAQAJbGFzdF9taW50BmZyZWV6ZQhjbGF3YmFjawl3aGl0ZWxpc3QIb3B0ZWRfaW4ObGFzdF9taW50X3RpbWUxG0EBtIIOBJ2xcQUEo9gPQgSlmaZuBN8fp1oE4aqRgwQDgOVlBPid1n0Elgtg5ATKiBl2BEaQk1UEqLV30gRKVnL3BKt21aQEbSc9ZzYaAI4OAQgA9gDkAM4AuACiAJIAgABpAFgARgAwABkAAiJDMRkURDEYRDYaARfAHIgDXBYpTFCwI0MxGRREMRhENhoBF8AciAM3FilMULAjQzEZFEQxGEQ2GgEXwBw2GgIXiAMNI0MxGRREMRhENhoBF8AciALsI0MxGRREMRhEiALYFilMULAjQzEZFEQxGEQ2GgEXwByIArQWKUxQsCNDMRkURDEYRDYaAVcCAIgCXCNDMRkURDEYRDYaAReIAhMjQzEZFEQxGEQ2GgEXNhoCF8AciAGoI0MxGRREMRhENhoBFzYaAhfAHIgBQCNDMRkURDEYRDYaARfAHIgBHylMULAjQzEZFEQxGEQ2GgEXwDCIALkjQzEZFEQxGEQ2GgEXwByIAJMjQzEZFEQxGEQ2GgEXwBw2GgIXwBw2GgMXwBw2GgQXwBw2GgUXNhoGVwIANhoHVwIANhoIFzYaCVcCAIgAEhYpTFCwI0MxGUD+sDEYFEQjQ4oJATEAMgkSRCInBWUiTgJNFEQnBSNnKov7ZycGi/dngAdyZXNlcnZli/hnJwqL+WcnC4v6ZycHJGciJwVlIk4CTYmKAQAxADIDIicGZU0SRCcMi/9niYoBADEASSInDWMnCE4CTScIEkEAJosASSgiZkknCSJmSSsiZkknBCJmSYAHaGlzdG9yeSJmJw2AAYBmsSKyEov/shGLALIUgQSyECKyAbOJigEBi/8yCGEnCCJPAlSJigIAi/8yCGFEMQAyAyInBmVNEkSL/kQyByInDmUiTgJNIicHZSROAk0ISwEORCIqZSJOAk2L/ggqTGcnDkxni/8iKGMiTgJNi/4Ii/8oTwJmiYoCADEAMgMiJwxlTUkyAxNBABKLAIsBEkAACIv/iwESQQAuI0SLAEkiKGMiTgJNSYv+D0SL/yIoYyJOAk1Mi/4JTwIoTwJmi/4Ii/8oTwJmiSJC/8+KAQAxAEkiKGMiTgJNSYv/D0SL/wlLAShPAmZJIicEYyJOAk2L/wgnBExmIiplIk4CTYv/CSpMZ4mKAQAxAEkiK2MiTgJNSwEiJwljIk4CTUsBgQIMRCInB2UkTgJNMgdOAggPRIFkSwKI/u0jCEsBK08CZicJMgdmiYoBAYv/IihjIk4CTYkiKmUiTgJNiYoBADEAMgMiJwplTRJEiYoCADEAMgMiJwtlTRJEiYoBAYv/IicEYyJOAk2JigEBi/8iK2MiTgJNiQ==", "clear": "CoEBQw=="}, "compilerInfo": {"compiler": "puya", "compilerVersion": {"major": 4, "minor": 9, "patch": 0}}, "events": [], "networks": {}, "source": {"approval": "", "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"}, "sourceInfo": {"approval": {"pcOffsetMethod": "none", "sourceInfo": [{"pc": [916], "errorMessage": "Address not whitelisted"}, {"pc": [634], "errorMessage": "Already initialized"}, {"pc": [820], "errorMessage": "Amount must be positive"}, {"pc": [1065], "errorMessage": "Cooldown active"}, {"pc": [931, 982], "errorMessage": "Insufficient balance"}, {"pc": [843], "errorMessage": "Mint cooldown active"}, {"pc": [279, 302, 325, 347, 365, 382, 405, 423, 439, 461, 483, 505, 523, 541], "errorMessage": "OnCompletion is not NoOp"}, {"pc": [1136], "errorMessage": "Only clawback"}, {"pc": [624], "errorMessage": "Only creator can initialize"}, {"pc": [1121], "errorMessage": "Only freeze account"}, {"pc": [817], "errorMessage": "Only manager can mint"}, {"pc": [696], "errorMessage": "Only manager can set whitelist"}, {"pc": [806], "errorMessage": "Receiver not opted in"}, {"pc": [1050], "errorMessage": "Recovery limit reached"}, {"pc": [613], "errorMessage": "can only call when creating"}, {"pc": [282, 305, 328, 350, 368, 385, 408, 426, 442, 464, 486, 508, 526, 544], "errorMessage": "can only call when not creating"}]}, "clear": {"pcOffsetMethod": "none", "sourceInfo": []}}, "templateVariables": {}}"""
APP_SPEC = algokit_utils.Arc56Contract.from_json(_APP_SPEC_JSON)

def _parse_abi_args(args: object | None = None) -> list[object] | None:
    """Helper to parse ABI args into the format expected by underlying client"""
    if args is None:
        return None

    def convert_dataclass(value: object) -> object:
        if dataclasses.is_dataclass(value):
            return tuple(convert_dataclass(getattr(value, field.name)) for field in dataclasses.fields(value))
        elif isinstance(value, (list, tuple)):
            return type(value)(convert_dataclass(item) for item in value)
        return value

    match args:
        case tuple():
            method_args = list(args)
        case _ if dataclasses.is_dataclass(args):
            method_args = [getattr(args, field.name) for field in dataclasses.fields(args)]
        case _:
            raise ValueError("Invalid 'args' type. Expected 'tuple' or 'TypedDict' for respective typed arguments.")

    return [
        convert_dataclass(arg) if not isinstance(arg, algokit_utils.AppMethodCallTransactionArgument) else arg
        for arg in method_args
    ] if method_args else None

def _init_dataclass(cls: type, data: dict) -> object:
    """
    Recursively instantiate a dataclass of type `cls` from `data`.

    For each field on the dataclass, if the field type is also a dataclass
    and the corresponding data is a dict, instantiate that field recursively.
    """
    field_values = {}
    for field in dataclasses.fields(cls):
        field_value = data.get(field.name)
        # Check if the field expects another dataclass and the value is a dict.
        if dataclasses.is_dataclass(field.type) and isinstance(field_value, dict):
            field_values[field.name] = _init_dataclass(typing.cast(type, field.type), field_value)
        else:
            field_values[field.name] = field_value
    return cls(**field_values)

@dataclasses.dataclass(frozen=True, kw_only=True)
class InitializeArgs:
    """Dataclass for initialize arguments"""
    manager: str | bytes
    reserve: str | bytes
    freeze: str | bytes
    clawback: str | bytes
    total_supply: int
    asset_name: str
    unit_name: str
    decimals: int
    url: str

    @property
    def abi_method_signature(self) -> str:
        return "initialize(account,account,account,account,uint64,string,string,uint64,string)uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class SetWhitelistArgs:
    """Dataclass for set_whitelist arguments"""
    address: str | bytes

    @property
    def abi_method_signature(self) -> str:
        return "set_whitelist(account)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class OptInUserArgs:
    """Dataclass for opt_in_user arguments"""
    asset: int

    @property
    def abi_method_signature(self) -> str:
        return "opt_in_user(asset)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class IsUserOptedInArgs:
    """Dataclass for is_user_opted_in arguments"""
    user: str | bytes

    @property
    def abi_method_signature(self) -> str:
        return "is_user_opted_in(account)bool"

@dataclasses.dataclass(frozen=True, kw_only=True)
class MintTokenArgs:
    """Dataclass for mint_token arguments"""
    amount: int
    receiver: str | bytes

    @property
    def abi_method_signature(self) -> str:
        return "mint_token(uint64,account)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class TransferTokenArgs:
    """Dataclass for transfer_token arguments"""
    amount: int
    receiver: str | bytes

    @property
    def abi_method_signature(self) -> str:
        return "transfer_token(uint64,account)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class RedeemTokenArgs:
    """Dataclass for redeem_token arguments"""
    amount: int

    @property
    def abi_method_signature(self) -> str:
        return "redeem_token(uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class RecoverTokenArgs:
    """Dataclass for recover_token arguments"""
    user_id: str

    @property
    def abi_method_signature(self) -> str:
        return "recover_token(string)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class GetBalanceArgs:
    """Dataclass for get_balance arguments"""
    account: str | bytes

    @property
    def abi_method_signature(self) -> str:
        return "get_balance(account)uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class FreezeAccountArgs:
    """Dataclass for freeze_account arguments"""
    target: str | bytes

    @property
    def abi_method_signature(self) -> str:
        return "freeze_account(account)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class ClawbackTokensArgs:
    """Dataclass for clawback_tokens arguments"""
    target: str | bytes
    amount: int

    @property
    def abi_method_signature(self) -> str:
        return "clawback_tokens(account,uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class GetUserRedemptionsArgs:
    """Dataclass for get_user_redemptions arguments"""
    user: str | bytes

    @property
    def abi_method_signature(self) -> str:
        return "get_user_redemptions(account)uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class GetUserMintCountArgs:
    """Dataclass for get_user_mint_count arguments"""
    user: str | bytes

    @property
    def abi_method_signature(self) -> str:
        return "get_user_mint_count(account)uint64"


class CarbonCreditContractParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def initialize(
        self,
        args: tuple[str | bytes, str | bytes, str | bytes, str | bytes, int, str, str, int, str] | InitializeArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "initialize(account,account,account,account,uint64,string,string,uint64,string)uint64",
            "args": method_args,
        }))

    def set_whitelist(
        self,
        args: tuple[str | bytes] | SetWhitelistArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_whitelist(account)void",
            "args": method_args,
        }))

    def opt_in_user(
        self,
        args: tuple[int] | OptInUserArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "opt_in_user(asset)void",
            "args": method_args,
        }))

    def is_user_opted_in(
        self,
        args: tuple[str | bytes] | IsUserOptedInArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "is_user_opted_in(account)bool",
            "args": method_args,
        }))

    def mint_token(
        self,
        args: tuple[int, str | bytes] | MintTokenArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "mint_token(uint64,account)void",
            "args": method_args,
        }))

    def transfer_token(
        self,
        args: tuple[int, str | bytes] | TransferTokenArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "transfer_token(uint64,account)void",
            "args": method_args,
        }))

    def redeem_token(
        self,
        args: tuple[int] | RedeemTokenArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "redeem_token(uint64)void",
            "args": method_args,
        }))

    def recover_token(
        self,
        args: tuple[str] | RecoverTokenArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "recover_token(string)void",
            "args": method_args,
        }))

    def get_balance(
        self,
        args: tuple[str | bytes] | GetBalanceArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_balance(account)uint64",
            "args": method_args,
        }))

    def get_total_supply(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_total_supply()uint64",
        }))

    def freeze_account(
        self,
        args: tuple[str | bytes] | FreezeAccountArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "freeze_account(account)void",
            "args": method_args,
        }))

    def clawback_tokens(
        self,
        args: tuple[str | bytes, int] | ClawbackTokensArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "clawback_tokens(account,uint64)void",
            "args": method_args,
        }))

    def get_user_redemptions(
        self,
        args: tuple[str | bytes] | GetUserRedemptionsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_user_redemptions(account)uint64",
            "args": method_args,
        }))

    def get_user_mint_count(
        self,
        args: tuple[str | bytes] | GetUserMintCountArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_user_mint_count(account)uint64",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> algokit_utils.AppCallParams:
        return self.app_client.params.bare.clear_state(
            params,
            
        )


class CarbonCreditContractCreateTransactionParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def initialize(
        self,
        args: tuple[str | bytes, str | bytes, str | bytes, str | bytes, int, str, str, int, str] | InitializeArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "initialize(account,account,account,account,uint64,string,string,uint64,string)uint64",
            "args": method_args,
        }))

    def set_whitelist(
        self,
        args: tuple[str | bytes] | SetWhitelistArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_whitelist(account)void",
            "args": method_args,
        }))

    def opt_in_user(
        self,
        args: tuple[int] | OptInUserArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "opt_in_user(asset)void",
            "args": method_args,
        }))

    def is_user_opted_in(
        self,
        args: tuple[str | bytes] | IsUserOptedInArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "is_user_opted_in(account)bool",
            "args": method_args,
        }))

    def mint_token(
        self,
        args: tuple[int, str | bytes] | MintTokenArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "mint_token(uint64,account)void",
            "args": method_args,
        }))

    def transfer_token(
        self,
        args: tuple[int, str | bytes] | TransferTokenArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "transfer_token(uint64,account)void",
            "args": method_args,
        }))

    def redeem_token(
        self,
        args: tuple[int] | RedeemTokenArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "redeem_token(uint64)void",
            "args": method_args,
        }))

    def recover_token(
        self,
        args: tuple[str] | RecoverTokenArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "recover_token(string)void",
            "args": method_args,
        }))

    def get_balance(
        self,
        args: tuple[str | bytes] | GetBalanceArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_balance(account)uint64",
            "args": method_args,
        }))

    def get_total_supply(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_total_supply()uint64",
        }))

    def freeze_account(
        self,
        args: tuple[str | bytes] | FreezeAccountArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "freeze_account(account)void",
            "args": method_args,
        }))

    def clawback_tokens(
        self,
        args: tuple[str | bytes, int] | ClawbackTokensArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "clawback_tokens(account,uint64)void",
            "args": method_args,
        }))

    def get_user_redemptions(
        self,
        args: tuple[str | bytes] | GetUserRedemptionsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_user_redemptions(account)uint64",
            "args": method_args,
        }))

    def get_user_mint_count(
        self,
        args: tuple[str | bytes] | GetUserMintCountArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_user_mint_count(account)uint64",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> Transaction:
        return self.app_client.create_transaction.bare.clear_state(
            params,
            
        )


class CarbonCreditContractSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def initialize(
        self,
        args: tuple[str | bytes, str | bytes, str | bytes, str | bytes, int, str, str, int, str] | InitializeArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "initialize(account,account,account,account,uint64,string,string,uint64,string)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def set_whitelist(
        self,
        args: tuple[str | bytes] | SetWhitelistArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_whitelist(account)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def opt_in_user(
        self,
        args: tuple[int] | OptInUserArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "opt_in_user(asset)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def is_user_opted_in(
        self,
        args: tuple[str | bytes] | IsUserOptedInArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[bool]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "is_user_opted_in(account)bool",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[bool], parsed_response)

    def mint_token(
        self,
        args: tuple[int, str | bytes] | MintTokenArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "mint_token(uint64,account)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def transfer_token(
        self,
        args: tuple[int, str | bytes] | TransferTokenArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "transfer_token(uint64,account)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def redeem_token(
        self,
        args: tuple[int] | RedeemTokenArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "redeem_token(uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def recover_token(
        self,
        args: tuple[str] | RecoverTokenArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "recover_token(string)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def get_balance(
        self,
        args: tuple[str | bytes] | GetBalanceArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_balance(account)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def get_total_supply(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_total_supply()uint64",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def freeze_account(
        self,
        args: tuple[str | bytes] | FreezeAccountArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "freeze_account(account)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def clawback_tokens(
        self,
        args: tuple[str | bytes, int] | ClawbackTokensArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "clawback_tokens(account,uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def get_user_redemptions(
        self,
        args: tuple[str | bytes] | GetUserRedemptionsArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_user_redemptions(account)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def get_user_mint_count(
        self,
        args: tuple[str | bytes] | GetUserMintCountArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_user_mint_count(account)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[algokit_utils.ABIReturn]:
        return self.app_client.send.bare.clear_state(
            params,
            send_params=send_params,
        )


class GlobalStateValue(typing.TypedDict):
    """Shape of global_state state key values"""
    carbon_credit_interval: int
    token_asset_id: int
    total_supply: int
    manager: str
    reserve: str
    freeze: str
    clawback: str
    whitelist: str
    last_mint_time: int

class LocalStateValue(typing.TypedDict):
    """Shape of local_state state key values"""
    user_balance: int
    user_last_mint: int
    user_mint_count: int
    user_redemption_count: int
    user_token_history: int
    opted_in: bool

class CarbonCreditContractState:
    """Methods to access state for the current CarbonCreditContract app"""

    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def global_state(
        self
    ) -> "_GlobalState":
            """Methods to access global_state for the current app"""
            return _GlobalState(self.app_client)

    def local_state(
        self, address: str
    ) -> "_LocalState":
            """Methods to access local_state for the current app"""
            return _LocalState(self.app_client, address)

class _GlobalState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {}

    def get_all(self) -> GlobalStateValue:
        """Get all current keyed values from global_state state"""
        result = self.app_client.state.global_state.get_all()
        if not result:
            return typing.cast(GlobalStateValue, {})

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.global_state.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return typing.cast(GlobalStateValue, converted)

    @property
    def carbon_credit_interval(self) -> int:
        """Get the current value of the carbon_credit_interval key in global_state state"""
        value = self.app_client.state.global_state.get_value("carbon_credit_interval")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def token_asset_id(self) -> int:
        """Get the current value of the token_asset_id key in global_state state"""
        value = self.app_client.state.global_state.get_value("token_asset_id")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def total_supply(self) -> int:
        """Get the current value of the total_supply key in global_state state"""
        value = self.app_client.state.global_state.get_value("total_supply")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def manager(self) -> str:
        """Get the current value of the manager key in global_state state"""
        value = self.app_client.state.global_state.get_value("manager")
        if isinstance(value, dict) and "address" in self._struct_classes:
            return _init_dataclass(self._struct_classes["address"], value)  # type: ignore
        return typing.cast(str, value)

    @property
    def reserve(self) -> str:
        """Get the current value of the reserve key in global_state state"""
        value = self.app_client.state.global_state.get_value("reserve")
        if isinstance(value, dict) and "address" in self._struct_classes:
            return _init_dataclass(self._struct_classes["address"], value)  # type: ignore
        return typing.cast(str, value)

    @property
    def freeze(self) -> str:
        """Get the current value of the freeze key in global_state state"""
        value = self.app_client.state.global_state.get_value("freeze")
        if isinstance(value, dict) and "address" in self._struct_classes:
            return _init_dataclass(self._struct_classes["address"], value)  # type: ignore
        return typing.cast(str, value)

    @property
    def clawback(self) -> str:
        """Get the current value of the clawback key in global_state state"""
        value = self.app_client.state.global_state.get_value("clawback")
        if isinstance(value, dict) and "address" in self._struct_classes:
            return _init_dataclass(self._struct_classes["address"], value)  # type: ignore
        return typing.cast(str, value)

    @property
    def whitelist(self) -> str:
        """Get the current value of the whitelist key in global_state state"""
        value = self.app_client.state.global_state.get_value("whitelist")
        if isinstance(value, dict) and "address" in self._struct_classes:
            return _init_dataclass(self._struct_classes["address"], value)  # type: ignore
        return typing.cast(str, value)

    @property
    def last_mint_time(self) -> int:
        """Get the current value of the last_mint_time key in global_state state"""
        value = self.app_client.state.global_state.get_value("last_mint_time")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

class _LocalState:
    def __init__(self, app_client: algokit_utils.AppClient, address: str):
        self.app_client = app_client
        self.address = address
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {}

    def get_all(self) -> LocalStateValue:
        """Get all current keyed values from local_state state"""
        result = self.app_client.state.local_state(self.address).get_all()
        if not result:
            return typing.cast(LocalStateValue, {})

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.local_state.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return typing.cast(LocalStateValue, converted)

    @property
    def user_balance(self) -> int:
        """Get the current value of the user_balance key in local_state state"""
        value = self.app_client.state.local_state(self.address).get_value("user_balance")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def user_last_mint(self) -> int:
        """Get the current value of the user_last_mint key in local_state state"""
        value = self.app_client.state.local_state(self.address).get_value("user_last_mint")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def user_mint_count(self) -> int:
        """Get the current value of the user_mint_count key in local_state state"""
        value = self.app_client.state.local_state(self.address).get_value("user_mint_count")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def user_redemption_count(self) -> int:
        """Get the current value of the user_redemption_count key in local_state state"""
        value = self.app_client.state.local_state(self.address).get_value("user_redemption_count")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def user_token_history(self) -> int:
        """Get the current value of the user_token_history key in local_state state"""
        value = self.app_client.state.local_state(self.address).get_value("user_token_history")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def opted_in(self) -> bool:
        """Get the current value of the opted_in key in local_state state"""
        value = self.app_client.state.local_state(self.address).get_value("opted_in")
        if isinstance(value, dict) and "bool" in self._struct_classes:
            return _init_dataclass(self._struct_classes["bool"], value)  # type: ignore
        return typing.cast(bool, value)

class CarbonCreditContractClient:
    """Client for interacting with CarbonCreditContract smart contract"""

    @typing.overload
    def __init__(self, app_client: algokit_utils.AppClient) -> None: ...
    
    @typing.overload
    def __init__(
        self,
        *,
        algorand: _AlgoKitAlgorandClient,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None: ...

    def __init__(
        self,
        app_client: algokit_utils.AppClient | None = None,
        *,
        algorand: _AlgoKitAlgorandClient | None = None,
        app_id: int | None = None,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None:
        if app_client:
            self.app_client = app_client
        elif algorand and app_id:
            self.app_client = algokit_utils.AppClient(
                algokit_utils.AppClientParams(
                    algorand=algorand,
                    app_spec=APP_SPEC,
                    app_id=app_id,
                    app_name=app_name,
                    default_sender=default_sender,
                    default_signer=default_signer,
                    approval_source_map=approval_source_map,
                    clear_source_map=clear_source_map,
                )
            )
        else:
            raise ValueError("Either app_client or algorand and app_id must be provided")
    
        self.params = CarbonCreditContractParams(self.app_client)
        self.create_transaction = CarbonCreditContractCreateTransactionParams(self.app_client)
        self.send = CarbonCreditContractSend(self.app_client)
        self.state = CarbonCreditContractState(self.app_client)

    @staticmethod
    def from_creator_and_name(
        creator_address: str,
        app_name: str,
        algorand: _AlgoKitAlgorandClient,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
    ) -> "CarbonCreditContractClient":
        return CarbonCreditContractClient(
            algokit_utils.AppClient.from_creator_and_name(
                creator_address=creator_address,
                app_name=app_name,
                app_spec=APP_SPEC,
                algorand=algorand,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
                ignore_cache=ignore_cache,
                app_lookup_cache=app_lookup_cache,
            )
        )
    
    @staticmethod
    def from_network(
        algorand: _AlgoKitAlgorandClient,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "CarbonCreditContractClient":
        return CarbonCreditContractClient(
            algokit_utils.AppClient.from_network(
                app_spec=APP_SPEC,
                algorand=algorand,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    @property
    def app_id(self) -> int:
        return self.app_client.app_id
    
    @property
    def app_address(self) -> str:
        return self.app_client.app_address
    
    @property
    def app_name(self) -> str:
        return self.app_client.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_client.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_client.algorand

    def clone(
        self,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "CarbonCreditContractClient":
        return CarbonCreditContractClient(
            self.app_client.clone(
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    def new_group(self) -> "CarbonCreditContractComposer":
        return CarbonCreditContractComposer(self)

    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["initialize(account,account,account,account,uint64,string,string,uint64,string)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["set_whitelist(account)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["opt_in_user(asset)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["is_user_opted_in(account)bool"],
        return_value: algokit_utils.ABIReturn | None
    ) -> bool | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["mint_token(uint64,account)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["transfer_token(uint64,account)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["redeem_token(uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["recover_token(string)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_balance(account)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_total_supply()uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["freeze_account(account)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["clawback_tokens(account,uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_user_redemptions(account)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_user_mint_count(account)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None: ...

    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None | bool | int:
        """Decode ABI return value for the given method."""
        if return_value is None:
            return None
    
        arc56_method = self.app_spec.get_arc56_method(method)
        decoded = return_value.get_arc56_value(arc56_method, self.app_spec.structs)
    
        # If method returns a struct, convert the dict to appropriate dataclass
        if (arc56_method and
            arc56_method.returns and
            arc56_method.returns.struct and
            isinstance(decoded, dict)):
            struct_class = globals().get(arc56_method.returns.struct)
            if struct_class:
                return struct_class(**typing.cast(dict, decoded))
        return decoded


@dataclasses.dataclass(frozen=True)
class CarbonCreditContractBareCallCreateParams(algokit_utils.AppClientBareCallCreateParams):
    """Parameters for creating CarbonCreditContract contract with bare calls"""
    on_complete: typing.Literal[OnComplete.NoOpOC] | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientBareCallCreateParams:
        return algokit_utils.AppClientBareCallCreateParams(**self.__dict__)

class CarbonCreditContractFactory(algokit_utils.TypedAppFactoryProtocol[CarbonCreditContractBareCallCreateParams, None, None]):
    """Factory for deploying and managing CarbonCreditContractClient smart contracts"""

    def __init__(
        self,
        algorand: _AlgoKitAlgorandClient,
        *,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        version: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ):
        self.app_factory = algokit_utils.AppFactory(
            params=algokit_utils.AppFactoryParams(
                algorand=algorand,
                app_spec=APP_SPEC,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                version=version,
                compilation_params=compilation_params,
            )
        )
        self.params = CarbonCreditContractFactoryParams(self.app_factory)
        self.create_transaction = CarbonCreditContractFactoryCreateTransaction(self.app_factory)
        self.send = CarbonCreditContractFactorySend(self.app_factory)

    @property
    def app_name(self) -> str:
        return self.app_factory.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_factory.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_factory.algorand

    def deploy(
        self,
        *,
        on_update: algokit_utils.OnUpdate | None = None,
        on_schema_break: algokit_utils.OnSchemaBreak | None = None,
        create_params: CarbonCreditContractBareCallCreateParams | None = None,
        update_params: None = None,
        delete_params: None = None,
        existing_deployments: algokit_utils.ApplicationLookup | None = None,
        ignore_cache: bool = False,
        app_name: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
    ) -> tuple[CarbonCreditContractClient, algokit_utils.AppFactoryDeployResult]:
        """Deploy the application"""
        deploy_response = self.app_factory.deploy(
            on_update=on_update,
            on_schema_break=on_schema_break,
            create_params=create_params.to_algokit_utils_params() if create_params else None,
            update_params=update_params,
            delete_params=delete_params,
            existing_deployments=existing_deployments,
            ignore_cache=ignore_cache,
            app_name=app_name,
            compilation_params=compilation_params,
            send_params=send_params,
        )

        return CarbonCreditContractClient(deploy_response[0]), deploy_response[1]

    def get_app_client_by_creator_and_name(
        self,
        creator_address: str,
        app_name: str,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> CarbonCreditContractClient:
        """Get an app client by creator address and name"""
        return CarbonCreditContractClient(
            self.app_factory.get_app_client_by_creator_and_name(
                creator_address,
                app_name,
                default_sender,
                default_signer,
                ignore_cache,
                app_lookup_cache,
                approval_source_map,
                clear_source_map,
            )
        )

    def get_app_client_by_id(
        self,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> CarbonCreditContractClient:
        """Get an app client by app ID"""
        return CarbonCreditContractClient(
            self.app_factory.get_app_client_by_id(
                app_id,
                app_name,
                default_sender,
                default_signer,
                approval_source_map,
                clear_source_map,
            )
        )


class CarbonCreditContractFactoryParams:
    """Parameters for creating transactions for CarbonCreditContract contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = CarbonCreditContractFactoryCreateParams(app_factory)
        self.update = CarbonCreditContractFactoryUpdateParams(app_factory)
        self.delete = CarbonCreditContractFactoryDeleteParams(app_factory)

class CarbonCreditContractFactoryCreateParams:
    """Parameters for 'create' operations of CarbonCreditContract contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateParams:
        """Creates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            compilation_params=compilation_params)

    def initialize(
        self,
        args: tuple[str | bytes, str | bytes, str | bytes, str | bytes, int, str, str, int, str] | InitializeArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the initialize(account,account,account,account,uint64,string,string,uint64,string)uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "initialize(account,account,account,account,uint64,string,string,uint64,string)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def set_whitelist(
        self,
        args: tuple[str | bytes] | SetWhitelistArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the set_whitelist(account)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "set_whitelist(account)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def opt_in_user(
        self,
        args: tuple[int] | OptInUserArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the opt_in_user(asset)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "opt_in_user(asset)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def is_user_opted_in(
        self,
        args: tuple[str | bytes] | IsUserOptedInArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the is_user_opted_in(account)bool ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "is_user_opted_in(account)bool",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def mint_token(
        self,
        args: tuple[int, str | bytes] | MintTokenArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the mint_token(uint64,account)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "mint_token(uint64,account)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def transfer_token(
        self,
        args: tuple[int, str | bytes] | TransferTokenArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the transfer_token(uint64,account)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "transfer_token(uint64,account)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def redeem_token(
        self,
        args: tuple[int] | RedeemTokenArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the redeem_token(uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "redeem_token(uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def recover_token(
        self,
        args: tuple[str] | RecoverTokenArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the recover_token(string)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "recover_token(string)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_balance(
        self,
        args: tuple[str | bytes] | GetBalanceArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_balance(account)uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_balance(account)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_total_supply(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_total_supply()uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_total_supply()uint64",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def freeze_account(
        self,
        args: tuple[str | bytes] | FreezeAccountArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the freeze_account(account)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "freeze_account(account)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def clawback_tokens(
        self,
        args: tuple[str | bytes, int] | ClawbackTokensArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the clawback_tokens(account,uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "clawback_tokens(account,uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_user_redemptions(
        self,
        args: tuple[str | bytes] | GetUserRedemptionsArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_user_redemptions(account)uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_user_redemptions(account)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_user_mint_count(
        self,
        args: tuple[str | bytes] | GetUserMintCountArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_user_mint_count(account)uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_user_mint_count(account)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

class CarbonCreditContractFactoryUpdateParams:
    """Parameters for 'update' operations of CarbonCreditContract contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppUpdateParams:
        """Updates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_update(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )

class CarbonCreditContractFactoryDeleteParams:
    """Parameters for 'delete' operations of CarbonCreditContract contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppDeleteParams:
        """Deletes an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_delete(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )


class CarbonCreditContractFactoryCreateTransaction:
    """Create transactions for CarbonCreditContract contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = CarbonCreditContractFactoryCreateTransactionCreate(app_factory)


class CarbonCreditContractFactoryCreateTransactionCreate:
    """Create new instances of CarbonCreditContract contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
    ) -> Transaction:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.create_transaction.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
        )


class CarbonCreditContractFactorySend:
    """Send calls to CarbonCreditContract contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = CarbonCreditContractFactorySendCreate(app_factory)


class CarbonCreditContractFactorySendCreate:
    """Send create calls to CarbonCreditContract contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ) -> tuple[CarbonCreditContractClient, algokit_utils.SendAppCreateTransactionResult]:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        result = self.app_factory.send.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            send_params=send_params,
            compilation_params=compilation_params
        )
        return CarbonCreditContractClient(result[0]), result[1]


class CarbonCreditContractComposer:
    """Composer for creating transaction groups for CarbonCreditContract contract calls"""

    def __init__(self, client: "CarbonCreditContractClient"):
        self.client = client
        self._composer = client.algorand.new_group()
        self._result_mappers: list[typing.Callable[[algokit_utils.ABIReturn | None], object] | None] = []

    def initialize(
        self,
        args: tuple[str | bytes, str | bytes, str | bytes, str | bytes, int, str, str, int, str] | InitializeArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "CarbonCreditContractComposer":
        self._composer.add_app_call_method_call(
            self.client.params.initialize(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "initialize(account,account,account,account,uint64,string,string,uint64,string)uint64", v
            )
        )
        return self

    def set_whitelist(
        self,
        args: tuple[str | bytes] | SetWhitelistArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "CarbonCreditContractComposer":
        self._composer.add_app_call_method_call(
            self.client.params.set_whitelist(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "set_whitelist(account)void", v
            )
        )
        return self

    def opt_in_user(
        self,
        args: tuple[int] | OptInUserArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "CarbonCreditContractComposer":
        self._composer.add_app_call_method_call(
            self.client.params.opt_in_user(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "opt_in_user(asset)void", v
            )
        )
        return self

    def is_user_opted_in(
        self,
        args: tuple[str | bytes] | IsUserOptedInArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "CarbonCreditContractComposer":
        self._composer.add_app_call_method_call(
            self.client.params.is_user_opted_in(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "is_user_opted_in(account)bool", v
            )
        )
        return self

    def mint_token(
        self,
        args: tuple[int, str | bytes] | MintTokenArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "CarbonCreditContractComposer":
        self._composer.add_app_call_method_call(
            self.client.params.mint_token(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "mint_token(uint64,account)void", v
            )
        )
        return self

    def transfer_token(
        self,
        args: tuple[int, str | bytes] | TransferTokenArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "CarbonCreditContractComposer":
        self._composer.add_app_call_method_call(
            self.client.params.transfer_token(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "transfer_token(uint64,account)void", v
            )
        )
        return self

    def redeem_token(
        self,
        args: tuple[int] | RedeemTokenArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "CarbonCreditContractComposer":
        self._composer.add_app_call_method_call(
            self.client.params.redeem_token(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "redeem_token(uint64)void", v
            )
        )
        return self

    def recover_token(
        self,
        args: tuple[str] | RecoverTokenArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "CarbonCreditContractComposer":
        self._composer.add_app_call_method_call(
            self.client.params.recover_token(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "recover_token(string)void", v
            )
        )
        return self

    def get_balance(
        self,
        args: tuple[str | bytes] | GetBalanceArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "CarbonCreditContractComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_balance(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_balance(account)uint64", v
            )
        )
        return self

    def get_total_supply(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "CarbonCreditContractComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_total_supply(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_total_supply()uint64", v
            )
        )
        return self

    def freeze_account(
        self,
        args: tuple[str | bytes] | FreezeAccountArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "CarbonCreditContractComposer":
        self._composer.add_app_call_method_call(
            self.client.params.freeze_account(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "freeze_account(account)void", v
            )
        )
        return self

    def clawback_tokens(
        self,
        args: tuple[str | bytes, int] | ClawbackTokensArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "CarbonCreditContractComposer":
        self._composer.add_app_call_method_call(
            self.client.params.clawback_tokens(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "clawback_tokens(account,uint64)void", v
            )
        )
        return self

    def get_user_redemptions(
        self,
        args: tuple[str | bytes] | GetUserRedemptionsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "CarbonCreditContractComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_user_redemptions(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_user_redemptions(account)uint64", v
            )
        )
        return self

    def get_user_mint_count(
        self,
        args: tuple[str | bytes] | GetUserMintCountArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "CarbonCreditContractComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_user_mint_count(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_user_mint_count(account)uint64", v
            )
        )
        return self

    def clear_state(
        self,
        *,
        args: list[bytes] | None = None,
        params: algokit_utils.CommonAppCallParams | None = None,
    ) -> "CarbonCreditContractComposer":
        params=params or algokit_utils.CommonAppCallParams()
        self._composer.add_app_call(
            self.client.params.clear_state(
                algokit_utils.AppClientBareCallParams(
                    **{
                        **dataclasses.asdict(params),
                        "args": args
                    }
                )
            )
        )
        return self
    
    def add_transaction(
        self, txn: Transaction, signer: TransactionSigner | None = None
    ) -> "CarbonCreditContractComposer":
        self._composer.add_transaction(txn, signer)
        return self
    
    def composer(self) -> algokit_utils.TransactionComposer:
        return self._composer
    
    def simulate(
        self,
        allow_more_logs: bool | None = None,
        allow_empty_signatures: bool | None = None,
        allow_unnamed_resources: bool | None = None,
        extra_opcode_budget: int | None = None,
        exec_trace_config: SimulateTraceConfig | None = None,
        simulation_round: int | None = None,
        skip_signatures: bool | None = None,
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.simulate(
            allow_more_logs=allow_more_logs,
            allow_empty_signatures=allow_empty_signatures,
            allow_unnamed_resources=allow_unnamed_resources,
            extra_opcode_budget=extra_opcode_budget,
            exec_trace_config=exec_trace_config,
            simulation_round=simulation_round,
            skip_signatures=skip_signatures,
        )
    
    def send(
        self,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.send(send_params)
